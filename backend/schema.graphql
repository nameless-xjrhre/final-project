### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Appointment {
  date: DateTime!
  hospitalBill: HospitalBill
  id: Int!
  medStaff: MedicalStaff
  note: String
  patient: Patient
  status: AppointmentStatus
  visitType: VisitType
}

enum AppointmentStatus {
  CANCELED
  DONE
  EXPIRED
  PENDING
}

enum BillStatus {
  PAID
  UNPAID
}

input CreateAppointmentInput {
  date: DateTime!
  note: String
  status: AppointmentStatus!
  visitType: VisitType!
}

input CreateHospitalBillInput {
  amount: Float!
  date: DateTime!
  deadlineDate: DateTime
  medStaffId: Int
  patientId: Int!
  status: BillStatus!
}

input CreateMedicalRecordInput {
  date: DateTime!
  diagnosis: String!
  medStaffId: Int
  patientId: Int!
  prescription: String!
}

input CreateMedicalStaffInput {
  address: String!
  contactNum: String!
  firstName: String!
  lastName: String!
}

input CreatePatientInput {
  address: String!
  contactNum: String!
  dateOfBirth: DateTime!
  firstName: String!
  lastName: String!
  sex: Sex!
}

input CreateScheduleInput {
  endTime: DateTime!
  medStaffId: Int!
  startTime: DateTime!
  status: ScheduleStatus!
}

input CreateUserInput {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input EditAppointmentInput {
  date: DateTime
  note: String
  status: AppointmentStatus
  visitType: VisitType
}

input EditHospitalBillInput {
  amount: Int
  date: DateTime
  deadlineDate: DateTime
  status: BillStatus
}

input EditPatientInput {
  address: String
  contactNum: String
  dateOfBirth: DateTime
  firstName: String
  id: Int
  lastName: String
  sex: Sex
}

input EditScheduleInput {
  endTime: DateTime
  medStaffId: Int
  startTime: DateTime
  status: ScheduleStatus
}

type HospitalBill {
  amount: Float!
  appointment: Appointment
  date: DateTime!
  deadlineDate: DateTime
  id: Int!
  medStaff: MedicalStaff
  patient: Patient
  patientId: Int!
  status: BillStatus!
}

type MedicalRecord {
  date: DateTime!
  diagnosis: String!
  id: Int!
  medStaff: MedicalStaff
  patient: Patient
  prescription: String!
}

type MedicalStaff {
  address: String!
  contactNum: String!
  firstName: String!
  fullName: String
  hospitalBills: [HospitalBill]
  id: Int!
  lastName: String!
  medicalRecords: [MedicalRecord]
  schedules: [Schedule]
}

type Mutation {
  createAppointment(data: CreateAppointmentInput!, medStaffId: Int!, patientId: Int!): Appointment
  createAppointmentWithPatient(appointment: CreateAppointmentInput!, medStaffId: Int!, patient: CreatePatientInput!): Appointment
  createHospitalBill(data: CreateHospitalBillInput!): HospitalBill
  createMedicalRecord(data: CreateMedicalRecordInput!): MedicalRecord
  createMedicalStaff(data: CreateMedicalStaffInput!): MedicalStaff
  createPatient(data: CreatePatientInput!): Patient
  createSchedule(data: CreateScheduleInput!): Schedule
  createSchedules(data: [CreateScheduleInput!]!): [Schedule]
  createUser(data: CreateUserInput!): User
  deleteAppointment(id: Int!): Appointment
  deletePatient(id: Int!): Patient
  deleteSchedule(id: Int!): Schedule
  editAppointment(data: EditAppointmentInput!, id: Int!): Appointment
  editHospitalBill(data: EditHospitalBillInput!, id: Int!): HospitalBill
  editPatient(data: EditPatientInput!, id: Int!): Patient
  editSchedule(data: EditScheduleInput!, id: Int!): Schedule
}

type Patient {
  address: String!
  appointments: [Appointment!]!
  contactNum: String!
  dateOfBirth: DateTime!
  firstName: String!
  fullName: String
  hospitalBills: [HospitalBill!]!
  id: Int!
  lastName: String!
  latestAppointment: Appointment
  medicalRecords: [MedicalRecord!]!
  sex: Sex!
}

type Query {
  appointments: [Appointment!]!
  appointmentsRange(count: Int!, start: Int!): [Appointment]
  hospitalBills: [HospitalBill!]!
  hospitalBillsByPatient(id: Int!): [HospitalBill]
  medicalRecords: [MedicalRecord!]!
  medicalRecordsByPatient(id: Int!): [MedicalRecord]
  medicalStaff: [MedicalStaff!]!
  pastAppointments: [Appointment]
  patient(id: Int!): Patient
  patients: [Patient!]!
  schedules: [Schedule!]!
  totalAppointments: Int
  totalBill: Float
  totalBillPaid: Float
  totalBillUnpaid: Float
  totalDoneAppointments: Int
  totalPatients: Int
  upcomingAppointments: [Appointment]
  users: [User!]!
}

type Schedule {
  endTime: DateTime!
  id: Int!
  medStaff: MedicalStaff
  startTime: DateTime!
  status: ScheduleStatus
}

enum ScheduleStatus {
  CLOSED
  DONE
  NOT_AVAILABLE
  OPEN
}

enum Sex {
  FEMALE
  MALE
}

type User {
  id: Int!
  password: String!
  userType: UserType
  username: String!
}

enum UserType {
  ADMIN
  USER
}

enum VisitType {
  FOLLOWUP
  ROUTINE
  URGENT
}
